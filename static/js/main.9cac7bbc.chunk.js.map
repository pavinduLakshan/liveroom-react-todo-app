{"version":3,"sources":["components/ToDoItem.js","components/AddTaskForm.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","secondary","display","flexDirection","ToDoItem","id","name","date","time","isCompleted","onChangeStatus","onDelete","classes","useState","anchorEl","setAnchorEl","handleClose","Paper","elevation","className","style","marginBottom","backgroundColor","Typography","variant","title","flexGrow","IconButton","fontSize","onClick","aria-controls","aria-haspopup","event","currentTarget","root","Menu","keepMounted","open","Boolean","onClose","MenuList","MenuItem","ListItemIcon","AddTaskForm","onSubmit","isOpen","setOpen","setName","React","Date","setDate","setTime","Button","Modal","disableBackdropClick","aria-labelledby","aria-describedby","cursor","float","e","preventDefault","Math","random","toLocaleDateString","toLocaleTimeString","completed","TextField","label","required","onChange","target","value","utils","DateFnsUtils","margin","format","KeyboardButtonProps","type","App","toDos","setToDos","setCompletedStatus","newStatus","selectedItem","find","todo","otherItems","filter","deleteToDo","newList","AppBar","position","Toolbar","console","log","Grid","container","item","xs","sm","md","lg","minHeight","component","map","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9cac7bbc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport NotCompletedIcon from '@material-ui/icons/CheckCircleOutline';\nimport UndoCompletedIcon from '@material-ui/icons/Undo';\nimport MoreVerticalIcon from '@material-ui/icons/MoreVert';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'left',\n    color: theme.palette.text.secondary,\n    display: 'flex',\n    flexDirection: 'row',\n  },\n}));\n\nconst ToDoItem = ({ id, name, date, time, isCompleted, onChangeStatus, onDelete }) => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <Paper\n      elevation={3}\n      className={classes.paper}\n      style={{\n        color: isCompleted ? 'white' : 'black',\n        marginBottom: '2%',\n        backgroundColor: isCompleted ? '#35C706' : 'white',\n      }}\n    >\n      {/* Todo item details */}\n      <div>\n        <Typography variant=\"h6\" className={classes.title}>\n          {name}\n        </Typography>\n        <Typography variant=\"subtitle1\">\n          {date} | {time}\n        </Typography>\n      </div>\n      <div style={{ flexGrow: 1 }}></div>\n      {/* Show corresponding icons based on completion status */}\n      {isCompleted ? (\n        <div>\n          <IconButton>\n            <UndoCompletedIcon style={{ color: 'red', fontSize: 30 }} onClick={() => onChangeStatus(id, false)} />\n          </IconButton>\n        </div>\n      ) : (\n        <IconButton>\n          <NotCompletedIcon style={{ fontSize: 30 }} onClick={() => onChangeStatus(id, true)} />\n        </IconButton>\n      )}\n      {/* Todo options menu */}\n\n      <IconButton\n        aria-controls=\"customized-menu\"\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleClick}\n      >\n        <MoreVerticalIcon style={{ color: isCompleted ? 'white' : 'black', fontSize: 25 }} />\n      </IconButton>\n\n      <Paper className={classes.root}>\n        <Menu anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose}>\n          <MenuList id=\"todo-options\">\n            <MenuItem\n              onClick={() => {\n                onDelete(id);\n                handleClose();\n              }}\n            >\n              <ListItemIcon>\n                <DeleteIcon fontSize=\"small\" />\n              </ListItemIcon>\n              <Typography variant=\"inherit\">Delete</Typography>\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Paper>\n    </Paper>\n  );\n};\n\nexport default ToDoItem;\n","import React, { useState } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\n// date and time utils\nimport 'date-fns';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nconst AddTaskForm = ({ onSubmit }) => {\n  const [isOpen, setOpen] = useState(false);\n  //form values\n  const [name, setName] = useState('');\n  const [date, setDate] = React.useState(new Date());\n  const [time, setTime] = React.useState(new Date());\n\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleDateChange = (date) => {\n    setDate(date);\n  };\n\n  const handleTimeChange = (time) => {\n    setTime(time);\n  };\n\n  function handleOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    onSubmit({\n      id: Math.random(),\n      name,\n      date: date.toLocaleDateString(),\n      time: time.toLocaleTimeString(),\n      completed: false,\n    });\n    handleClose();\n  }\n\n  return (\n    <div>\n      <Button id=\"add_todo_button\" onClick={handleOpen}>\n        Add Todo\n      </Button>\n      <Modal\n        open={isOpen}\n        disableBackdropClick\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <div className=\"add-todo-modal\">\n          <CloseIcon onClick={handleClose} style={{ cursor: 'pointer', float: 'right', marginBottom: '3%' }} />\n          <Typography variant=\"h6\" style={{ marginBottom: '4%' }}>\n            Add new Todo\n          </Typography>\n          <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column' }}>\n            <TextField id=\"outlined-basic\" label=\"name\" required variant=\"outlined\" onChange={handleNameChange} />\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <KeyboardDatePicker\n                margin=\"normal\"\n                id=\"date-picker-dialog\"\n                label=\"Date\"\n                format=\"MM/dd/yyyy\"\n                required\n                value={date}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date',\n                }}\n              />\n              <KeyboardTimePicker\n                margin=\"normal\"\n                id=\"time-picker\"\n                label=\"Time\"\n                value={time}\n                required\n                onChange={handleTimeChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change time',\n                }}\n              />\n            </MuiPickersUtilsProvider>\n            <Button type=\"submit\" style={{ backgroundColor: 'green', color: 'white' }}>\n              <Typography variant=\"h6\">Create</Typography>\n            </Button>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default AddTaskForm;\n","import React, { useState } from 'react';\n// Material UI component imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n// Other imports\nimport './App.css';\nimport ToDoItem from './components/ToDoItem';\nimport AddTaskForm from './components/AddTaskForm';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [toDos, setToDos] = useState([]);\n\n  function addToDo(todo) {\n    console.log(todo);\n    setToDos([...toDos, todo]);\n  }\n\n  function setCompletedStatus(id, newStatus) {\n    let selectedItem = toDos.find((todo) => todo.id === id);\n    selectedItem.completed = newStatus;\n\n    const otherItems = toDos.filter((todo) => todo.id !== id);\n    setToDos([...otherItems, selectedItem]);\n  }\n\n  function deleteToDo(id) {\n    let newList = toDos.filter((todo) => todo.id !== id);\n    setToDos(newList);\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        {/* AppBar */}\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              The LiveRoom Todo App\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <AddTaskForm onSubmit={addToDo} />\n        {/* Main Container */}\n        <Grid container spacing={0} className=\"main_container\">\n          {/* To do work */}\n          <Grid item xs={12} sm={12} md={6} lg={6} style={{ minHeight: '20vh' }}>\n            <Typography variant=\"h5\" component=\"h5\" style={{ textAlign: 'left' }}>\n              To do\n            </Typography>\n            {toDos\n              .filter((item) => !item.completed)\n              .map((item) => (\n                <ToDoItem\n                  id={item.id}\n                  name={item.name}\n                  date={item.date}\n                  time={item.time}\n                  onChangeStatus={setCompletedStatus}\n                  onDelete={deleteToDo}\n                  isCompleted={item.completed}\n                />\n              ))}\n          </Grid>\n          {/* Completed tasks */}\n          <Grid item xs={12} sm={12} md={6} lg={6} style={{ minHeight: '20vh' }}>\n            <Typography variant=\"h5\" component=\"h5\" style={{ textAlign: 'left' }}>\n              Done\n            </Typography>\n            {toDos\n              .filter((item) => item.completed)\n              .map((item) => (\n                <ToDoItem\n                  id={item.id}\n                  name={item.name}\n                  date={item.date}\n                  time={item.time}\n                  onChangeStatus={setCompletedStatus}\n                  onDelete={deleteToDo}\n                  isCompleted={item.completed}\n                />\n              ))}\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}