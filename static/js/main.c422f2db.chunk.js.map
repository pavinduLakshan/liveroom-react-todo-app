{"version":3,"sources":["components/ToDoItem.js","components/AddTaskForm.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","secondary","display","flexDirection","ToDoItem","id","name","date","time","isCompleted","onComplete","onDelete","onReverse","classes","useState","anchorEl","setAnchorEl","handleClose","Paper","elevation","className","style","marginBottom","backgroundColor","Typography","variant","title","flexGrow","IconButton","fontSize","onClick","aria-controls","aria-haspopup","event","currentTarget","root","Menu","keepMounted","open","Boolean","onClose","MenuList","MenuItem","ListItemIcon","AddTaskForm","onSubmit","isOpen","setOpen","setName","React","Date","setDate","setTime","Button","Modal","disableBackdropClick","aria-labelledby","aria-describedby","float","e","preventDefault","Math","random","toLocaleDateString","toLocaleTimeString","completed","TextField","label","required","onChange","target","value","utils","DateFnsUtils","margin","format","KeyboardButtonProps","type","App","toDo","setToDo","done","setDone","markAsCompleted","comItem","filter","t","newToDo","markAsNotCompleted","newDone","deleteToDo","newList","AppBar","position","Toolbar","todo","console","log","Grid","container","item","xs","sm","md","lg","component","length","map","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c422f2db.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport NotCompletedIcon from \"@material-ui/icons/CheckCircleOutline\";\r\nimport UndoCompletedIcon from \"@material-ui/icons/Undo\";\r\nimport MoreVerticalIcon from \"@material-ui/icons/MoreVert\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"left\",\r\n    color: theme.palette.text.secondary,\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n}));\r\n\r\nconst ToDoItem = ({ id,name, date, time, isCompleted, onComplete, onDelete, onReverse}) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} className={classes.paper} style={{\r\n        color: isCompleted ? \"white\" : \"black\",\r\n        marginBottom: \"2%\",\r\n        backgroundColor: isCompleted ? \"#35C706\" : \"white\"}}>\r\n      {/* Todo item details */}\r\n      <div>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          {name}\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\">\r\n          {date} | {time}\r\n        </Typography>\r\n      </div>\r\n      <div style={{ flexGrow: 1 }}></div>\r\n      {/* Show corresponding icons based on completion status */}\r\n      {isCompleted ? (\r\n        <div>\r\n          <IconButton>\r\n            <UndoCompletedIcon style={{ color: \"red\", fontSize: 30 }} onClick={() => onReverse(id)}/>\r\n          </IconButton>\r\n        </div>\r\n      ) : (\r\n <IconButton>\r\n          <NotCompletedIcon style={{ fontSize: 30 }} onClick={() => onComplete(id)}/>\r\n        </IconButton>\r\n      )}\r\n{/* Todo options menu */}\r\n\r\n<IconButton\r\n        aria-controls=\"customized-menu\"\r\n        aria-haspopup=\"true\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={handleClick}\r\n      >\r\n        <MoreVerticalIcon style={{ color: isCompleted ? \"white\" :  \"black\" ,fontSize: 25 }} />\r\n      </IconButton>\r\n\r\n      <Paper className={classes.root}>\r\n        <Menu\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n        >\r\n          <MenuList id=\"todo-options\">\r\n            \r\n            <MenuItem onClick={() => {\r\nonDelete(id,isCompleted)\r\nhandleClose();\r\n            }}>\r\n              <ListItemIcon>\r\n                <DeleteIcon fontSize=\"small\" />\r\n              </ListItemIcon>\r\n              <Typography variant=\"inherit\">Delete</Typography>\r\n            </MenuItem>\r\n          </MenuList>\r\n        </Menu>\r\n      </Paper>\r\n\r\n    \r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ToDoItem;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n// date and time utils\r\nimport \"date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\n\r\nconst AddTaskForm = ({ onSubmit }) => {\r\n  const [isOpen, setOpen] = useState(false);\r\n  //form values\r\n  const [name, setName] = useState(\"\");\r\n  const [date, setDate] = React.useState(new Date());\r\n  const [time, setTime] = React.useState(new Date());\r\n\r\n  const handleNameChange = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setDate(date);\r\n  };\r\n\r\n  const handleTimeChange = (time) => {\r\n    setTime(time);\r\n  };\r\n\r\n  function handleOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    onSubmit({\r\n        id: Math.random(),\r\n      name,\r\n      date: date.toLocaleDateString(),\r\n      time: time.toLocaleTimeString(),\r\n      completed: false\r\n    });\r\n    handleClose()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button id=\"add_todo_button\" onClick={handleOpen}>\r\n        Add Todo\r\n      </Button>\r\n      <Modal\r\n        open={isOpen}\r\n        disableBackdropClick\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        <div className=\"add-todo-modal\">\r\n          <CloseIcon\r\n            onClick={handleClose}\r\n            style={{ float: \"right\", marginBottom: \"3%\" }}\r\n          />\r\n          <Typography variant=\"h6\" style={{ marginBottom: \"4%\" }}>\r\n            Add new Todo\r\n          </Typography>\r\n          <form\r\n            onSubmit={handleSubmit}\r\n            style={{ display: \"flex\", flexDirection: \"column\" }}\r\n          >\r\n            <TextField\r\n              id=\"outlined-basic\"\r\n              label=\"name\"\r\n              required\r\n              variant=\"outlined\"\r\n              onChange={handleNameChange}\r\n            />\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <KeyboardDatePicker\r\n                margin=\"normal\"\r\n                id=\"date-picker-dialog\"\r\n                label=\"Date\"\r\n                format=\"MM/dd/yyyy\"\r\n                required\r\n                value={date}\r\n                onChange={handleDateChange}\r\n                KeyboardButtonProps={{\r\n                  \"aria-label\": \"change date\",\r\n                }}\r\n              />\r\n              <KeyboardTimePicker\r\n                margin=\"normal\"\r\n                id=\"time-picker\"\r\n                label=\"Time\"\r\n                value={time}\r\n                required\r\n                onChange={handleTimeChange}\r\n                KeyboardButtonProps={{\r\n                  \"aria-label\": \"change time\",\r\n                }}\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n            <Button\r\n              type=\"submit\"\r\n              style={{ backgroundColor: \"green\", color: \"white\" }}\r\n            >\r\n              <Typography variant=\"h6\">Create</Typography>\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTaskForm;\r\n","import React, { useState } from \"react\";\n// Material UI component imports\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// Other imports\nimport \"./App.css\";\nimport ToDoItem from \"./components/ToDoItem\";\nimport AddTaskForm from \"./components/AddTaskForm\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [toDo, setToDo] = useState([]);\n  const [done, setDone] = useState([]);\n\n  function addToDo(todo) {\n    console.log(todo);\n    setToDo([...toDo, todo]);\n  }\n\n  function markAsCompleted(id){\n    let comItem = toDo.filter(t => t.id === id)\n    comItem[0].completed = true\n    setDone([...done,comItem[0]])\n    const newToDo = toDo.filter(t => t.id !== id)\n    setToDo(newToDo)\n  }\n\n  function markAsNotCompleted(id){\n    let comItem = done.filter(t => t.id === id)\n    comItem[0].completed = false\n\n    setToDo([...toDo,comItem[0]])\n    const newDone = done.filter(t => t.id !== id)\n    setDone(newDone)\n  }\n\n  function deleteToDo(id,completed){\n    if(completed){\n      let newList = done.filter(t => t.id !== id)\n      setDone(newList)\n    }\n    else{\n      let newList = toDo.filter(t => t.id !== id)\n      setToDo(newList)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={classes.root}>\n        {/* AppBar */}\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              The LiveRoom Todo App\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        \n          <AddTaskForm onSubmit={addToDo} />\n        \n\n        {/* Main Container */}\n        <Grid container spacing={5} className=\"main_container\">\n          {/* To do work */}\n          <Grid item xs={12} sm={12} md={6} lg={6}>\n            <Typography\n              variant=\"h5\"\n              component=\"h5\"\n              style={{ textAlign: \"left\" }}\n            >\n              To do\n            </Typography>\n            {toDo.length > 0 ? toDo.map((item) => (\n              <ToDoItem\n              id={item.id}\n                name={item.name}\n                date={item.date}\n                time={item.time}\n                onComplete={markAsCompleted}\n                onDelete={deleteToDo}\n                onReverse={markAsNotCompleted}\n                isCompleted={item.completed}\n              />\n            )) : <Typography variant=\"subtitle1\" style={{padding: \"2%\",color: \"grey\"}}>No tasks yet</Typography>}\n          </Grid>\n          {/* Completed tasks */}\n          <Grid item xs={12} sm={12} md={6} lg={6}>\n            <Typography\n              variant=\"h5\"\n              component=\"h5\"\n              style={{ textAlign: \"left\" }}\n            >\n              Done\n            </Typography>\n            {done.length > 0 ? done.map(item => <ToDoItem\n                          id={item.id}\n              name={item.name}\n              date={item.date}\n              time={item.time}\n              onDelete={deleteToDo}\n              isCompleted={item.completed}\n              onReverse={markAsNotCompleted}\n            /> ) : \n            \n<Typography variant=\"subtitle1\" style={{padding: \"2%\",color: \"grey\"}}>No completed tasks yet</Typography>\n            }\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}