{"version":3,"sources":["components/ToDoItem.js","components/AddTaskForm.js","views/TodoList/TodoList.js","views/Pagination/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","secondary","display","justifyContent","flexDirection","ToDoItem","name","date","timeout","time","isCompleted","isFirstRender","classes","Grow","in","key","unmountOnExit","style","transformOrigin","Paper","elevation","className","marginBottom","backgroundColor","Typography","variant","flexGrow","src","height","width","AddTaskForm","onSubmit","useState","isOpen","setOpen","setName","React","Date","setDate","setTime","handleClose","Fab","id","aria-label","IconButton","onClick","fontWeight","Modal","open","disableBackdropClick","onClose","aria-labelledby","aria-describedby","cursor","float","e","preventDefault","Math","random","toLocaleDateString","toLocaleTimeString","completed","TextField","label","required","onChange","target","value","utils","DateFnsUtils","margin","format","KeyboardButtonProps","Button","type","title","TodoList","setIsFirstRender","toDos","setToDos","setCompletedStatus","newStatus","selectedItem","find","todo","otherItems","filter","alert","deleteToDo","newList","useEffect","AppBar","position","Toolbar","Grid","container","item","xs","sm","md","lg","minHeight","paddingRight","component","map","index","onChangeStatus","onDelete","console","log","Pagination","list","setList","undefined","nextToken","setNextToken","nextNextToken","setNextNextToken","previousTokens","setPreviousTokens","currentPage","setCurrentPage","isNextBtnDisabled","setNextBtnDisabled","nItems","setNItems","fetch","method","body","JSON","stringify","LastEvaluatedKey","then","response","json","data","Items","catch","marginTop","marginRight","Select","disableUnderline","MenuItem","copy","b","pop","disableRipple","disableFocusRipple","disabled","c","PK","SK","themeLight","createMuiTheme","background","default","App","basename","CssBaseline","exact","path","ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c3c21a07.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport NotCompletedIcon from '@material-ui/icons/CheckCircleOutline';\nimport UndoCompletedIcon from '@material-ui/icons/Undo';\nimport MoreVerticalIcon from '@material-ui/icons/MoreVert';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport Grow from '@material-ui/core/Grow';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'left',\n    color: theme.palette.text.secondary,\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n}));\n\nconst ToDoItem = ({ name, date, time, timeout, isFirstRender, isCompleted }) => {\n  const classes = useStyles();\n\n  return (\n    <Grow in={true} key={name} unmountOnExit={true} style={{ transformOrigin: `0 0 0` }} {...{ timeout: timeout }}>\n      <Paper\n        elevation={3}\n        className={classes.paper}\n        style={{\n          color: isCompleted ? 'white' : 'black',\n          marginBottom: '2%',\n          backgroundColor: isCompleted ? '#35C706' : 'white',\n        }}\n      >\n        {/* Todo item details */}\n        <div>\n          <Typography variant=\"h6\">{name}</Typography>\n          <Typography variant=\"subtitle1\">{date}</Typography>\n        </div>\n        <div style={{ flexGrow: 1 }}></div>\n        <img src={`https://avatars.dicebear.com/api/human/${name}.svg`} height=\"50\" width=\"50\" />\n      </Paper>\n    </Grow>\n  );\n};\n\nexport default ToDoItem;\n","import React, { useState } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fab from '@material-ui/core/Fab';\n// date and time utils\nimport 'date-fns';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nconst AddTaskForm = ({ onSubmit }) => {\n  const [isOpen, setOpen] = useState(false);\n  //form values\n  const [name, setName] = useState('');\n  const [date, setDate] = React.useState(new Date());\n  const [time, setTime] = React.useState(new Date());\n\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleDateChange = (date) => {\n    setDate(date);\n  };\n\n  const handleTimeChange = (time) => {\n    setTime(time);\n  };\n\n  function handleOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    onSubmit({\n      id: Math.random(),\n      name,\n      date: date.toLocaleDateString(),\n      time: time.toLocaleTimeString(),\n      completed: false,\n    });\n    handleClose();\n  }\n\n  return (\n    <div>\n      <Fab id=\"add_todo_button\" color=\"primary\" aria-label=\"add\">\n        <IconButton onClick={handleOpen}>\n          <AddIcon style={{ color: 'white', fontWeight: 'bold' }} />\n        </IconButton>\n      </Fab>\n      <Modal\n        open={isOpen}\n        disableBackdropClick\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <div className=\"add-todo-modal\">\n          <CloseIcon onClick={handleClose} style={{ cursor: 'pointer', float: 'right', marginBottom: '3%' }} />\n          <Typography variant=\"h6\" style={{ marginBottom: '4%' }}>\n            Add new Todo\n          </Typography>\n          <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column' }}>\n            <TextField id=\"outlined-basic\" label=\"name\" required variant=\"outlined\" onChange={handleNameChange} />\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <KeyboardDatePicker\n                margin=\"normal\"\n                id=\"date-picker-dialog\"\n                label=\"Date\"\n                format=\"MM/dd/yyyy\"\n                required\n                value={date}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date',\n                }}\n              />\n              <KeyboardTimePicker\n                margin=\"normal\"\n                id=\"time-picker\"\n                label=\"Time\"\n                value={time}\n                required\n                onChange={handleTimeChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change time',\n                }}\n              />\n            </MuiPickersUtilsProvider>\n            <Button type=\"submit\" style={{ backgroundColor: 'green', color: 'white' }}>\n              <Typography variant=\"h6\">Create</Typography>\n            </Button>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default AddTaskForm;\n","import React, { useState, useEffect } from 'react';\nimport ToDoItem from '../../components/ToDoItem';\nimport AddTaskForm from '../../components/AddTaskForm';\n// Material UI component imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport './todolist.css';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst TodoList = () => {\n  const classes = useStyles();\n  const [isFirstRender, setIsFirstRender] = useState(true);\n  const [toDos, setToDos] = useState([\n    {\n      id: Math.random(),\n      name: 'Go shopping',\n      date: '05-11-2020',\n      time: '11:00 AM',\n      completed: false,\n    },\n    {\n      id: Math.random(),\n      name: 'Bathing the dog',\n      date: '01-04-2020',\n      time: '02:25 PM',\n      completed: false,\n    },\n    {\n      id: Math.random(),\n      name: 'Practice Kungfu',\n      date: '07-09-2020',\n      time: '10:45 AM',\n      completed: true,\n    },\n    {\n      id: Math.random(),\n      name: 'Drive Aston Martin',\n      date: '15-10-2020',\n      time: '12:00 PM',\n      completed: true,\n    },\n    {\n      id: Math.random(),\n      name: 'Sleep',\n      date: '05-11-2020',\n      time: '1:20 AM',\n      completed: false,\n    },\n  ]);\n\n  useEffect(() => {\n    setIsFirstRender(false);\n  });\n\n  function addToDo(todo) {\n    console.log(todo);\n    setToDos([...toDos, todo]);\n  }\n\n  function setCompletedStatus(id, newStatus) {\n    let selectedItem = toDos.find((todo) => todo.id === id);\n    if (!selectedItem) {\n      alert(\"Item doesn't exist.\");\n      return;\n    }\n    selectedItem.completed = newStatus;\n\n    const otherItems = toDos.filter((todo) => todo.id !== id);\n    setToDos([...otherItems, selectedItem]);\n  }\n\n  function deleteToDo(id) {\n    let newList = toDos.filter((todo) => todo.id !== id);\n    setToDos(newList);\n  }\n  return (\n    <div>\n      {/* AppBar */}\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            The LiveRoom Todo App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      {/* Main Container */}\n      <Grid container spacing={0} className=\"main_container\">\n        {/* To do work */}\n        <Grid item xs={12} sm={12} md={6} lg={6} style={{ minHeight: '40vh', padding: '1%', paddingRight: '1%' }}>\n          <Typography variant=\"h5\" component=\"h5\" style={{ textAlign: 'left', marginBottom: '1%' }}>\n            To do\n          </Typography>\n          {toDos\n            .filter((item) => !item.completed)\n            .map((item, index) => (\n              <ToDoItem\n                id={item.id}\n                isFirstRender={isFirstRender}\n                timeout={250 * (index + 1)}\n                name={item.name}\n                date={item.date}\n                time={item.time}\n                onChangeStatus={setCompletedStatus}\n                onDelete={deleteToDo}\n                isCompleted={item.completed}\n              />\n            ))}\n        </Grid>\n        {/* Completed tasks */}\n        <Grid item xs={12} sm={12} md={6} lg={6} style={{ minHeight: '40vh', padding: '1%', paddingRight: '1%' }}>\n          <Typography variant=\"h5\" component=\"h5\" style={{ textAlign: 'left', marginBottom: '1%' }}>\n            Done\n          </Typography>\n          {toDos\n            .filter((item) => item.completed)\n            .map((item, index) => (\n              <ToDoItem\n                id={item.id}\n                isFirstRender={isFirstRender}\n                name={item.name}\n                date={item.date}\n                timeout={900 * (index + 1)}\n                time={item.time}\n                onChangeStatus={setCompletedStatus}\n                onDelete={deleteToDo}\n                isCompleted={item.completed}\n              />\n            ))}\n        </Grid>\n      </Grid>\n      <AddTaskForm onSubmit={addToDo} />\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ToDoItem from '../../components/ToDoItem';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBackIos';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nimport './pagination.css';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Pagination = () => {\n  const [list, setList] = useState([]);\n  const classes = useStyles();\n  const [nextToken, setNextToken] = useState(undefined);\n  const [nextNextToken, setNextNextToken] = useState();\n  const [previousTokens, setPreviousTokens] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isNextBtnDisabled, setNextBtnDisabled] = useState(false);\n  const [nItems, setNItems] = useState(3);\n\n  function handleNItems(e) {\n    setNItems(e.target.value);\n  }\n\n  useEffect(() => {\n    fetch('https://af5xufo4j6.execute-api.us-east-1.amazonaws.com/test/all', {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify({ LastEvaluatedKey: nextToken }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data.LastEvaluatedKey) {\n          setNextBtnDisabled(true);\n        }\n        setNextNextToken(data.LastEvaluatedKey);\n        setList(data.Items);\n      })\n      .catch((e) => console.log(e));\n  }, [nextToken]);\n\n  const next = () => {\n    setPreviousTokens((c) => [...c, nextToken]);\n    setNextToken(nextNextToken);\n    setCurrentPage(currentPage + 1);\n  };\n\n  const prev = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n    if (isNextBtnDisabled) {\n      setNextBtnDisabled(false);\n    }\n    const copy = [...previousTokens];\n    const b = copy.pop();\n    setPreviousTokens(copy);\n    setNextToken(b);\n  };\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            The LiveRoom Pagination App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid container spacing={0} className=\"main_container\">\n        <Grid item xs={12} sm={12} md={2} lg={2}></Grid>\n        <Grid item xs={12} sm={12} md={8} lg={8} style={{ marginTop: '1.3%' }}>\n          <div id=\"btn_container\">\n            <p style={{ marginRight: '2%' }}>Rows per page</p>\n            <Select value={nItems} disableUnderline onChange={handleNItems}>\n              <MenuItem value={3}>3</MenuItem>\n              <MenuItem value={5}>5</MenuItem>\n              <MenuItem value={10}>10</MenuItem>\n            </Select>\n            <div style={{ flexGrow: 1 }} />\n            <IconButton\n              onClick={prev}\n              className=\"pagination_btn\"\n              disableRipple\n              disableFocusRipple\n              disabled={currentPage === 1}\n            >\n              <ArrowBackIcon />\n            </IconButton>\n            <p id=\"current_page\">current page: {currentPage}</p>\n            <IconButton\n              onClick={next}\n              className=\"pagination_btn\"\n              disableRipple\n              disableFocusRipple\n              disabled={isNextBtnDisabled}\n              style={{ padding: 0 }}\n            >\n              <ArrowForwardIcon />\n            </IconButton>\n          </div>\n          {list.map((item, index) => {\n            return <ToDoItem id={Math.random()} timeout={250 * (index + 1)} name={item.PK} date={item.SK} />;\n          })}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n// Other imports\nimport { HashRouter, Route } from 'react-router-dom';\nimport ToDoList from './views/TodoList/TodoList';\nimport Pagination from './views/Pagination/Pagination';\nimport './App.css';\n\nconst themeLight = createMuiTheme({\n  palette: {\n    background: {\n      default: '#D4E0E4',\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/liveroom-react-todo-app\">\n      <MuiThemeProvider theme={themeLight}>\n        <CssBaseline />\n        <div className=\"App\">\n          <Route exact path=\"/\" component={ToDoList} />\n          <Route path=\"/pagination\" component={Pagination} />\n        </div>\n      </MuiThemeProvider>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}